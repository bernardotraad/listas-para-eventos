import { Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { createClient } from '@supabase/supabase-js';
import { LoginDto, CreateUserDto, AuthResponse, ApiResponse } from '../types';

// Fun√ß√£o para obter cliente Supabase com service role key para autentica√ß√£o
function getAuthSupabase() {
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  const supabaseUrl = process.env.SUPABASE_URL;
  
  if (!supabaseUrl || !serviceRoleKey) {
    throw new Error('SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rios');
  }

  return createClient(supabaseUrl, serviceRoleKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });
}

// Controlador de autentica√ß√£o
export class AuthController {
  // Login de usu√°rio
  static async login(req: Request, res: Response) {
    try {
      const { username, password }: LoginDto = req.body;

      // Valida√ß√£o b√°sica
      if (!username || !password) {
        return res.status(400).json({
          success: false,
          error: 'Username e senha s√£o obrigat√≥rios'
        });
      }

      // Buscar usu√°rio no banco usando Supabase com service role key
      console.log('üîç Buscando usu√°rio:', username);
      
      const supabase = getAuthSupabase();
      
      // Primeiro, vamos verificar se a tabela users existe e tem dados
      console.log('üìã Verificando tabela users...');
      const { data: allUsers, error: allUsersError } = await supabase
        .from('users')
        .select('username, email, role');
      console.log('üë• Todos os usu√°rios:', allUsers);
      console.log('‚ùå Erro ao buscar todos:', allUsersError);
      
      // Agora buscar o usu√°rio espec√≠fico
      const { data: users, error } = await supabase
        .from('users')
        .select('id, username, email, password_hash, role, full_name, is_active, created_at, updated_at')
        .eq('username', username)
        .single();

      console.log('üìä Resultado da busca espec√≠fica:', { users, error });

      if (error || !users) {
        console.log('‚ùå Usu√°rio n√£o encontrado ou erro:', error);
        return res.status(401).json({
          success: false,
          error: 'Credenciais inv√°lidas'
        });
      }

      // Verificar se o usu√°rio est√° ativo
      if (!users.is_active) {
        return res.status(401).json({
          success: false,
          error: 'Usu√°rio inativo'
        });
      }

      // Verificar senha
      console.log('üîê Verificando senha...');
      const isValidPassword = await bcrypt.compare(password, users.password_hash);
      console.log('‚úÖ Senha v√°lida?', isValidPassword);
      
      if (!isValidPassword) {
        console.log('‚ùå Senha inv√°lida');
        return res.status(401).json({
          success: false,
          error: 'Credenciais inv√°lidas'
        });
      }

      // Gerar token JWT
      const token = jwt.sign(
        { userId: users.id },
        process.env.JWT_SECRET!,
        { expiresIn: '24h' }
      );

      console.log('üîê Token gerado:', token.substring(0, 20) + '...');
      console.log('üîê JWT_SECRET configurado:', !!process.env.JWT_SECRET);

      // Remover password_hash da resposta
      const { password_hash, ...userWithoutPassword } = users;

      const response: ApiResponse<AuthResponse> = {
        success: true,
        data: {
          token,
          user: userWithoutPassword
        },
        message: 'Login realizado com sucesso'
      };

      console.log('üì§ Enviando resposta de login...');
      res.json(response);
    } catch (error) {
      console.error('Erro no login:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor'
      });
    }
  }

  // Registro de novo usu√°rio (apenas admin pode criar)
  static async register(req: Request, res: Response) {
    try {
      const { username, email, password, role, full_name }: CreateUserDto = req.body;

      // Valida√ß√£o b√°sica
      if (!username || !email || !password || !role || !full_name) {
        return res.status(400).json({
          success: false,
          error: 'Todos os campos s√£o obrigat√≥rios'
        });
      }

      // Verificar se username j√° existe
      const supabase = getAuthSupabase();
      const { data: existingUsers } = await supabase
        .from('users')
        .select('id')
        .or(`username.eq.${username},email.eq.${email}`);

      if (existingUsers && existingUsers.length > 0) {
        return res.status(400).json({
          success: false,
          error: 'Username ou email j√° existe'
        });
      }

      // Hash da senha
      const saltRounds = 12;
      const passwordHash = await bcrypt.hash(password, saltRounds);

      // Inserir novo usu√°rio
      const { data: newUser, error } = await supabase
        .from('users')
        .insert({
          username,
          email,
          password_hash: passwordHash,
          role,
          full_name
        })
        .select('id, username, email, role, full_name, is_active, created_at, updated_at')
        .single();

      if (error) {
        console.error('Erro ao inserir usu√°rio:', error);
        return res.status(500).json({
          success: false,
          error: 'Erro ao criar usu√°rio'
        });
      }

      const response: ApiResponse<typeof newUser> = {
        success: true,
        data: newUser,
        message: 'Usu√°rio criado com sucesso'
      };

      res.status(201).json(response);
    } catch (error) {
      console.error('Erro no registro:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor'
      });
    }
  }

  // Verificar token atual
  static async verifyToken(req: Request, res: Response) {
    try {
      const authHeader = req.headers['authorization'];
      const token = authHeader && authHeader.split(' ')[1];

      console.log('üîç Verificando token...');
      console.log('üìã Auth header:', authHeader);
      console.log('üé´ Token:', token ? `${token.substring(0, 20)}...` : 'null');
      console.log('üé´ Token completo:', token);

      if (!token) {
        console.log('‚ùå Token n√£o fornecido');
        return res.status(401).json({
          success: false,
          error: 'Token n√£o fornecido'
        });
      }

      // Verificar se o token tem o formato correto (3 partes separadas por pontos)
      const tokenParts = token.split('.');
      console.log('üîç Partes do token:', tokenParts.length);
      if (tokenParts.length !== 3) {
        console.log('‚ùå Token malformado - n√£o tem 3 partes');
        return res.status(401).json({
          success: false,
          error: 'Token malformado'
        });
      }

      console.log('üîê JWT_SECRET configurado:', !!process.env.JWT_SECRET);
      console.log('üîê JWT_SECRET length:', process.env.JWT_SECRET?.length);
      
      const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: number };
      console.log('‚úÖ Token decodificado:', decoded);
      
      const supabase = getAuthSupabase();
      const { data: user, error } = await supabase
        .from('users')
        .select('id, username, email, role, full_name, is_active, created_at, updated_at')
        .eq('id', decoded.userId)
        .eq('is_active', true)
        .single();

      console.log('üë§ Usu√°rio encontrado:', user);
      console.log('‚ùå Erro na busca:', error);

      if (error || !user) {
        console.log('‚ùå Usu√°rio n√£o encontrado ou erro');
        return res.status(401).json({
          success: false,
          error: 'Token inv√°lido'
        });
      }

      console.log('‚úÖ Token v√°lido para usu√°rio:', user.username);

      const response: ApiResponse<typeof user> = {
        success: true,
        data: user,
        message: 'Token v√°lido'
      };

      res.json(response);
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o do token:', error);
      res.status(401).json({
        success: false,
        error: 'Token inv√°lido'
      });
    }
  }
} 